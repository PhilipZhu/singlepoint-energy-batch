#!/bin/bash
# Run Single-Point v 1.31

while getopts "hfcst:nS:E" opt; do
    case $opt in
        h) PROMPT_USAGE_THEN_EXIT="true";;
        f) flag_force="true" ;;
        c) flag_clean="true" ;;
        s) flag_seque="true" ;;
        t) timer_duration="$OPTARG" ;;
        n) flag_norep="true" ;;
        S) INI_SRC_FILE="$OPTARG" ;;
        E) flag_exe="true" ;;
        *) PROMPT_USAGE_THEN_EXIT="true"; break;;
    esac
done

# Remaining arguments
shift $((OPTIND - 1))

#############################
# default software settings #
#############################

# the following sections can be copied as a template for the settings file (<software.ini>)

#-------------------------#
# RECOMMENDED definitions
#-------------------------#

## uncomment this line in external settings file
#SOFTWARE_INI_DIR="$( dirname -- "${BASH_SOURCE[0]}" | xargs realpath)"

# The script still run if this function not defined, but it would be nice to implement it.
software_ini_usage() {
    echo "(Default software settings) Usage: $0 [options] <xyz file> [<charge>] [<multiplicity>]" >&2
    exit 1
}

#-------------------------------------------#
# user definitions (not required by script)
#-------------------------------------------#

# Optional second argument
if [ -n "$2" ]; then
    chg="$2"
else
    chg="0"
fi

# Optional third argument
if [ -n "$3" ]; then
    mult="$3"
else
    mult="1"
fi

# environment variables
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${HOME}/software/orca/openmpi-4.1.6/lib"
export PATH="$PATH:${HOME}/software/orca/openmpi-4.1.6/bin"

#-------------------------------#
# REQUIRED variable definitions
#-------------------------------#

# required definitions
export CALC_EXE="${HOME}/software/orca/orca_6_0_0_shared_openmpi416/orca"
export CALC_INP_FILENAME="config.inp"
export CALC_STDOUT_FILENAME="config.stdout"

#-------------------------------#
# REQUIRED function definitions
#-------------------------------#

# split_input
#   Input  : <xyz file>
#   Output : Generates input files for ${CALC_EXE} with name format xxNNNN. Each
#            file will be renamed as ${CALC_INP_FILENAME}. Each job will run as:
#
#            ${CALC_EXE} "${CALC_INP_FILENAME}" > "${CALC_STDOUT_FILENAME}"
#
split_input() {
  local input_xyz_file="$1"
  local chgmult="${chg} ${mult}"
  local FHEAD='%maxcore 6000
%base "tmp"
! DLPNO-CCSD(T) aug-cc-pVTZ aug-cc-pVTZ/C TightSCF
* xyz '"${chgmult}"
  local FTAIL='*'
  local SHEAD="$(echo "${FHEAD}" | awk -v ORS='\\n' '{gsub(/\r$/,"")}1' | sed 's/\\n$//g')"
  local STAIL="$(echo "${FTAIL}" | awk -v ORS='\\n' '{gsub(/\r$/,"")}1' | sed 's/\\n$//g')"
  local CHARCOMMENT='#'
  csplit -z -b "%05d" <(sed '\@^[[:space:]]*[0-9]*[[:space:]]*$@{N;s@^.*\n@'"${STAIL}"'\n'"${CHARCOMMENT}"'###CSPLIT####\n'"${SHEAD}"'\n'"${CHARCOMMENT}${CHARCOMMENT}${CHARCOMMENT}"' COMMENT FROM XYZ FILE : @g}' ${input_xyz_file} | sed -n '\@^'"${CHARCOMMENT}"'###CSPLIT####@,$p' && echo -e "${STAIL}") '/^'"${CHARCOMMENT}"'###CSPLIT####$/' '{*}'
}

# isfinished
#   Invoked in each job folder.
#   Check if the job is complete.
#   Output : true/false
isfinished() {
[ "$(grep -s 'TOTAL RUN TIME:' "${CALC_STDOUT_FILENAME}" | wc -l)" -ne 0 ]
}

# lstmpfiles
#   Invoked in each job folder.
#   List all temporary files in the job folder.
#   Note  : Presence of tmp files or ${CALC_STDOUT_FILENAME} indicates another job might be running.
#           All tmp files will be removed after calculation finishes. All tmp files and unfinished
#           ${CALC_STDOUT_FILENAME} will be removed via clean (-c). DO NOT list output files that
#           you want to KEEP after job finishes!
lstmpfiles(){
  ls | grep '^tmp.'
  return 0
}

# getresult
#   Invoked in each job folder.
#   Extract and convert calculation results from the output file.
#   Output : Any one-line string extracted with all relevant information.
getresult(){
  grep "FINAL SINGLE POINT ENERGY" "${CALC_STDOUT_FILENAME}" | tail -n 1 | awk '{printf("%.17f kcal/mol\n", ($5)*627.5096)}'
}

####################
#       end        #
####################

usage() {
  (
echo "Run Single-Point
Usage: $0 [option] <xyz file> [extra arguments required by <software.ini>, see below]

Options:
     -h                 help
     -f                 force      Start fresh calculations, if previous calculations exist, move to backup.
     -c                 clean      Removes unfinished outputs, reports finished results. No calculation performed.
     -s                 sequential Calculate all structures in sequential order. Default is random order.
                                   When huge number of folders are present, accessing in unsorted order is faster.
                                   Furthermore, if multiple jobs run in parallel, random order reduces collision.
     -t <hh:mm:ss>      timer      After duration, stop calculation, report finished results.
     -n                 no_report  Skip final report of finished results.
     -S <software.ini>  source     Customize software. The <software.ini> file is sourced before running. In the
                                   <software.ini> file, define CALC_EXE, CALC_INP_FILENAME, CALC_STDOUT_FILENAME,
                                   split_input(), isfinished(), lstmpfiles(), getresult(). <software.ini> is
                                   exposed to the same arguments as this script (excluding flags). The default
                                   software section near the begining of this script's source code can be copied
                                   as a template for <software.ini>.
     -E                 EXE        Investigate raw CALC_EXE command. This runs:
                                   "'$CALC_EXE "$CALC_INP_FILENAME" > "$CALC_STDOUT_FILENAME"'"
                                   Parameter <xyz file> is required for format consistency because some custom
                                   <software.ini> might parse command arguments assuming <xyz file> exist, but its
                                   value is ignored.
" ) >&2
    echo "Usage specific to <software.ini>:" >&2
    declare -F software_ini_usage &> /dev/null && software_ini_usage || echo "No <software.ini>-specific documentation found." >&2
    exit 1
}

# Process options

# If error was encountered while parsing options. This will not contain software.ini specific usage message.
if [ -n "${PROMPT_USAGE_THEN_EXIT}" ]; then
  usage
fi

# Source settings file, OVERWRITES default software settings
if [ -n "${INI_SRC_FILE}" ]; then
    if [ ! -f "$INI_SRC_FILE" ]; then
      echo -e "\033[31mError: Settings file '$INI_SRC_FILE' does not exist.\033[0m" >&2
      usage
    fi
#    source "$INI_SRC_FILE" "$@"
    realpath "$INI_SRC_FILE" >/dev/null && source "$(realpath "$INI_SRC_FILE")" "$@"

fi

# Initialize timer
if [ -n "${timer_duration}" ]; then
    # Validate timer input format
    if [[ -n $timer_duration && ! $timer_duration =~ ^([0-9]+):([0-9]{1,2}):([0-9]{1,2})$ ]]; then
      echo -e "\033[31mError: Duration must be in hh:mm:ss format.\033[0m" >&2
      usage
    fi
    IFS=: read -r hours minutes seconds <<< "$timer_duration"
    timer_duration_seconds=$((10#$hours * 3600 + 10#$minutes * 60 + 10#$seconds))
    start_time=$(date +%s)
fi

# Run raw CALC_EXE command if requested.
if [ -n "${flag_exe}" ]; then
  echo -e "\033[33m> $CALC_EXE \"${CALC_INP_FILENAME}\" > \"${CALC_STDOUT_FILENAME}\"\033[0m"
  $CALC_EXE "${CALC_INP_FILENAME}" > "${CALC_STDOUT_FILENAME}"
  exit
fi

# Sanity Checks

# Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
  echo -e "\033[31mError: no <xyz file> provided.\033[0m" >&2
  usage
fi

# Check <xyz file> file exist
if [ ! -f "$1" ]; then
  echo -e "\033[31mError: <xyz file>:'$1' does not exist.\033[0m" >&2
  usage
fi

############################
### Start of main script ###
############################

input_xyz_file=$1
input_xyz_file_realpath=$(realpath ${input_xyz_file})
fn=${input_xyz_file%.xyz}

WD="${PWD}"
sdir="${fn}.DIR"

# prepare inputs (stage 1 - split input)

[ ! -d "${sdir}" ] && [ "$flag_clean" == "true" ] && [ "$flag_force" != "true" ] && echo "Do nothing. (No existing calculation folder, specified clean -c flag without force -f) : $0 $@ ($PWD)" >&2 && exit

if [ "$flag_force" == "true" ] || [ ! -d "${sdir}" ]; then
  [ -d "${sdir}" ] && rm -rf "${sdir}.bk" && mv "${sdir}" "${sdir}.bk" && echo "${sdir} exists, renaming to backup" >> "${WD}/${sdir}.bk/pid$$.log"
  rm -rf "${sdir}"
  mkdir -p "${sdir}/calculations/"
  cd "${WD}/${sdir}/calculations"
  split_input "${input_xyz_file_realpath}"
fi

# prepare inputs (stage 2 - prepare job folders)
cd "${WD}/${sdir}/calculations" || exit 1

[ "$flag_seque" == "true" ] && filelist=$(ls xx* 2> /dev/null) || filelist=$(ls -f -I . -I .. | grep '^xx')
for file in ${filelist}; do
  folder=${file#xx}
  #mkdir "c${folder}/" && mv "${file}" "c${folder}/${CALC_INP_FILENAME}" # weird race condition when multiple singlepoint running in parallel. would put xx000182 into c000183/
  mkdir "c${folder}/" && mv "${file}" "c${folder}/" && mv "c${folder}/${file}" "c${folder}/${CALC_INP_FILENAME}" # under race condition, this fixes inconsistent mv
done

# run
cd "${WD}/${sdir}/calculations" || exit 1

[ "$flag_seque" == "true" ] && folderlist=$(ls c*/ -d) || folderlist=$(ls -f -I . -I .. | grep '^c' | shuf)
for folder in ${folderlist}; do

  cd "${WD}/${sdir}/calculations"
  cd "$folder"

  # if clean

  [ "$flag_clean" == "true" ] && ! isfinished && rm -f "${CALC_STDOUT_FILENAME}" && (lstmpfiles 2> /dev/null | tr '\n' '\0' | xargs -0 rm -rf) # for safety concerns, only removes files KNOWN to be potentially generated by this script
  [ "$flag_clean" == "true" ] && continue

  # if run

  ( [ -f "${CALC_STDOUT_FILENAME}" ] || [ "$(lstmpfiles 2> /dev/null | wc -l)" -ne 0 ] || isfinished ) && echo "skips ${folder}" >> "${WD}/${sdir}/pid$$.log" && continue # skip folder: calculation running or finished

  flag_run="true" && echo -n "${folder} running.." >> "${WD}/${sdir}/pid$$.log"

  # run
  $CALC_EXE "${CALC_INP_FILENAME}" > "${CALC_STDOUT_FILENAME}" && (lstmpfiles 2> /dev/null | tr '\n' '\0' | xargs -0 rm -rf) && echo "next" >> "${WD}/${sdir}/pid$$.log"

  # collect result for this pid
  id=${folder#c} && id=${id%/}
  getresult | head -n 1 | paste -d' ' <(echo "$((10#${id}))") -

  # timer
  elapsed=$(( $(date +%s) - start_time ))
  [[ -n $timer_duration && elapsed -ge timer_duration_seconds ]] && echo "Timeout." | tee -a "${WD}/${sdir}/pid$$.log" >&2 && break;

done > "${WD}/${sdir}/pid$$.dat"

## uncomment if needed: if clean, no need to continue. (won't collect results)
#[ "$flag_clean" == "true" ] && exit

# if clean, no need to check "nothing to run". Continue to collect result.
[ "$flag_clean" == "true" ] && flag_run="true" && echo "Cleaning done." | tee -a "${WD}/${sdir}/pid$$.log" >&2

# check if nothing to run
[ "$flag_run" != "true" ] && echo "Nothing to run! All calculation folders are: 1. finished; or 2. being run by another process; or 3. failed. In case 3, make sure no other process is running, then try cleaning the calculation folder (use -c flag)." | tee -a "${WD}/${sdir}/pid$$.log" >&2

# check if skip report result
[ "$flag_norep" != "true" ] && echo "Now collecting result.." | tee -a "${WD}/${sdir}/pid$$.log" >&2 || exit

# collect result
cd "${WD}/${sdir}/calculations" || exit 1

[ "$flag_seque" == "true" ] && folderlist=$(ls c*/ -d) || folderlist=$(ls -f -I . -I .. | grep '^c' | sort)
for folder in ${folderlist}; do
  cd "${WD}/${sdir}/calculations"
  [ ! -d "$folder" ] && continue # check isfolder
  cd "$folder"
  id=${folder#c} && id=${id%/}
  getresult | head -n 1 | paste -d' ' <(echo "$((10#${id}))") -
done | tee "${WD}/${fn}.dat"
