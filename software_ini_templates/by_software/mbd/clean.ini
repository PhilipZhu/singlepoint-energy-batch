#-------------------------#
# RECOMMENDED definitions
#-------------------------#

SOFTWARE_INI_DIR="$( dirname -- "${BASH_SOURCE[0]}" | xargs realpath)"

software_ini_usage() {
    echo "$0"' -S <mbd.ini> <input.xyz> <path_to_settings.ini>' >&2
    exit 1
}

#-------------------------------------------#
# user definitions (not required by script)
#-------------------------------------------#

# Check input arguments
[ "$#" -lt 2 ] && echo 'Do not see enough arguments. Did you run:' && software_ini_usage >&2
[ ! -f "$2" ] && echo "Error: Settings file '$2' does not exist. Did you run:" && software_ini_usage >&2

# environment variables

MBD_INI_PATH="$(realpath "${2}")"

#-------------------------------#
# REQUIRED variable definitions
#-------------------------------#

# required definitions
export CALC_EXE="${SOFTWARE_INI_DIR}/run_exe_clean.sh  ${MBD_INI_PATH}"
export CALC_INP_FILENAME="input.xyz"
export CALC_STDOUT_FILENAME="/dev/null"

#-------------------------------#
# REQUIRED function definitions
#-------------------------------#

# split_input
#   Input  : <xyz file>
#   Output : Generates input files for ${CALC_EXE} with name format xxNNNN. Each
#            file will be renamed as ${CALC_INP_FILENAME}. Each job will run as:
#
#            ${CALC_EXE} "${CALC_INP_FILENAME}" > "${CALC_STDOUT_FILENAME}"
#
split_input() {
  local input_xyz_file="$1"
  bash "${SOFTWARE_INI_DIR}/split_input.sh" "${input_xyz_file}"
}

# isfinished
#   Invoked in each job folder.
#   Check if the job is complete.
#   Output : true/false
isfinished() {
[ -f "${CALC_STDOUT_FILENAME}" ] && [ "$(grep -A2 ".dat" "${CALC_STDOUT_FILENAME}" | tail -1 | wc -w)" -ge 2 ]
}

# lstmpfiles
#   Invoked in each job folder.
#   List all temporary files in the job folder.
#   Note  : Presence of tmp files or ${CALC_STDOUT_FILENAME} indicates another job might be running.
#           All tmp files and ${CALC_STDOUT_FILENAME} will be removed either via clean (-c) or after
#           calculation finishes. DO NOT list output files that you want to KEEP after job finishes!
lstmpfiles(){
#  ls -d *.mbd.DIR/ *.mbd.dat
  ls -d *.mbd.dat
  return 0
}

# getresult
#   Invoked in each job folder.
#   Extract and convert calculation results from the output file.
#   Output : Any one-line string extracted with all relevant information.
getresult(){
  tail -n 1 "${CALC_STDOUT_FILENAME}" | awk '{print $2}'
}
